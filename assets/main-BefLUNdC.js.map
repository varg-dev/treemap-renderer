{"version":3,"file":"main-BefLUNdC.js","sources":["../node_modules/@hpicgs/cbd-parser/lib/main.js"],"sourcesContent":["var DataType = /* @__PURE__ */ ((DataType2) => {\n  DataType2[\"Number\"] = \"number\";\n  DataType2[\"Int8\"] = \"int8\";\n  DataType2[\"Uint8\"] = \"uint8\";\n  DataType2[\"Int16\"] = \"int16\";\n  DataType2[\"Uint16\"] = \"uint16\";\n  DataType2[\"Int32\"] = \"int32\";\n  DataType2[\"Uint32\"] = \"uint32\";\n  DataType2[\"Float32\"] = \"float32\";\n  DataType2[\"Float64\"] = \"float64\";\n  DataType2[\"Color\"] = \"color\";\n  DataType2[\"String\"] = \"string\";\n  DataType2[\"Date\"] = \"date\";\n  return DataType2;\n})(DataType || {});\nfunction bytes(type) {\n  switch (type) {\n    case \"int8\":\n    case \"uint8\":\n      return 1;\n    case \"int16\":\n    case \"uint16\":\n      return 2;\n    case \"int32\":\n    case \"uint32\":\n    case \"float32\":\n    case \"number\":\n      return 4;\n    case \"float64\":\n    case \"date\":\n      return 8;\n    case \"color\":\n      return 16;\n    case \"string\":\n    default:\n      return 0;\n  }\n}\nfunction isFloat(type) {\n  switch (type) {\n    case \"number\":\n    case \"float32\":\n    case \"float64\":\n      return true;\n    default:\n      return false;\n  }\n}\nfunction isInt(type) {\n  switch (type) {\n    case \"int8\":\n    case \"uint8\":\n    case \"int16\":\n    case \"uint16\":\n    case \"int32\":\n    case \"uint32\":\n      return true;\n    default:\n      return false;\n  }\n}\nconst DEFAULT_ALPHA = 1;\nconst HEX_FORMAT_REGEX = new RegExp(/^(#|0x)?(([0-9a-f]{3}){1,2}|([0-9a-f]{4}){1,2})$/i);\nfunction hex2rgba(hex, failSilent = false) {\n  const rgba = [0, 0, 0, DEFAULT_ALPHA];\n  if (!HEX_FORMAT_REGEX.test(hex)) {\n    if (!failSilent) {\n      console.warn(\n        \"hexadecimal RGBA color string must conform to either\",\n        \"#0000, or #00000000, given\",\n        hex\n      );\n    }\n    return rgba;\n  }\n  const offset = hex.startsWith(\"0x\") ? 2 : hex.startsWith(\"#\") ? 1 : 0;\n  const length = Math.floor((hex.length - offset) / 3);\n  const stride = length - 1;\n  rgba[0] = parseInt(hex[offset + 0 * length] + hex[offset + 0 * length + stride], 16) / 255;\n  rgba[1] = parseInt(hex[offset + 1 * length] + hex[offset + 1 * length + stride], 16) / 255;\n  rgba[2] = parseInt(hex[offset + 2 * length] + hex[offset + 2 * length + stride], 16) / 255;\n  if (hex.length - offset === 4 || hex.length - offset === 8) {\n    rgba[3] = parseInt(hex[offset + 3 * length] + hex[offset + 3 * length + stride], 16) / 255;\n  }\n  if (!failSilent && (isNaN(rgba[0]) || isNaN(rgba[1]) || isNaN(rgba[2]) || isNaN(rgba[3]))) {\n    console.warn(`expected well formatted hexadecimal RGBA string, given '${hex}'`);\n  }\n  return rgba;\n}\nfunction parseLine(line, types) {\n  return line.map((cell, i) => {\n    if (isFloat(types[i]))\n      return Number.parseFloat(cell);\n    if (isInt(types[i]))\n      return Number.parseInt(cell);\n    switch (types[i]) {\n      case DataType.Color:\n        return hex2rgba(cell);\n      case DataType.Date: {\n        let n = Date.parse(cell);\n        if (isNaN(n))\n          n = Number.parseInt(cell);\n        return new Date(n);\n      }\n      case DataType.String:\n        return cell;\n      default:\n        return void 0;\n    }\n  });\n}\nclass PerfMon {\n  constructor() {\n    this._samples = /* @__PURE__ */ new Map();\n  }\n  start(id, label = id.toString()) {\n    if (this._samples.has(id)) {\n      console.warn(\"performance measurement already exists\");\n      return;\n    }\n    this._samples.set(id, {\n      start: Date.now(),\n      end: 0,\n      delta: 0,\n      label\n    });\n  }\n  stop(id) {\n    if (!this._samples.has(id)) {\n      console.warn(\"performance measurement doesn't exist\");\n      return;\n    }\n    const sample = this._samples.get(id);\n    sample.end = Date.now();\n    sample.delta = sample.end - sample.start;\n  }\n  get samples() {\n    return [...this._samples.values()];\n  }\n}\nfunction splitLine(line, delimiter) {\n  const cells = new Array();\n  let start = 0;\n  let quote = false;\n  let quoteActive = false;\n  const push = (end) => {\n    cells.push(line.substring(quote ? start + 1 : start, quote ? end - 1 : end));\n  };\n  for (let i = 0; i < line.length; i++) {\n    const char = line.charAt(i);\n    if (char === '\"') {\n      quoteActive = !quoteActive;\n      quote = true;\n      continue;\n    }\n    if (quoteActive) {\n      continue;\n    }\n    const { end, skip } = cellEnd(line, i, delimiter);\n    if (end) {\n      push(i);\n      start = i + skip;\n      quote = false;\n    }\n  }\n  push(void 0);\n  return cells;\n}\nfunction cellEnd(line, index, delimiter) {\n  const char = line.charAt(index);\n  switch (char) {\n    case delimiter:\n    case \"\\n\":\n      return { end: true, skip: 1 };\n    case \"\\r\":\n      if (line.charAt(index + 1) === \"\\n\") {\n        return { end: true, skip: 2 };\n      }\n    default:\n      return { end: false, skip: 0 };\n  }\n}\nfunction storeValue(value, index, chunk) {\n  switch (chunk.type) {\n    case DataType.Number:\n      chunk.set(index, value);\n      break;\n    case DataType.Color:\n      chunk.set(index, value);\n      break;\n    case DataType.Date:\n      chunk.set(index, value);\n      break;\n    case DataType.String:\n      chunk.set(index, value);\n      break;\n  }\n}\nfunction buffer(length, shared) {\n  if (shared)\n    return new SharedArrayBuffer(length);\n  else\n    return new ArrayBuffer(length);\n}\nclass BaseChunk {\n  constructor(type, length, offset) {\n    this._type = type;\n    this._length = length;\n    this._offset = offset;\n  }\n  get type() {\n    return this._type;\n  }\n  get length() {\n    return this._length;\n  }\n  get offset() {\n    return this._offset;\n  }\n  set offset(offset) {\n    this._offset = offset;\n  }\n}\nclass BufferChunk extends BaseChunk {\n  get data() {\n    return this._data;\n  }\n}\nclass ColorChunk extends BufferChunk {\n  constructor(length, offset, shared) {\n    super(DataType.Color, length, offset);\n    this._data = buffer(length * 4 * 4, shared);\n    this._view = new Float32Array(this._data);\n  }\n  get view() {\n    return this._view;\n  }\n  get(index) {\n    return Array.from(this._view.subarray(index * 4, (index + 1) * 4));\n  }\n  set(index, value) {\n    this._view.set(value, index * 4);\n  }\n}\nclass DateChunk extends BufferChunk {\n  constructor(length, offset, shared) {\n    super(DataType.Date, length, offset);\n    this._data = buffer(length * bytes(DataType.Date), shared);\n    this._view = new Float64Array(this._data);\n    this._min = Number.POSITIVE_INFINITY;\n    this._max = Number.NEGATIVE_INFINITY;\n  }\n  get view() {\n    return this._view;\n  }\n  get rawMin() {\n    return this._min;\n  }\n  get rawMax() {\n    return this._max;\n  }\n  get min() {\n    return new Date(this._min);\n  }\n  get max() {\n    return new Date(this._max);\n  }\n  updateExtrema(value) {\n    if (value < this._min)\n      this._min = value;\n    if (value > this._max)\n      this._max = value;\n  }\n  rawGet(index) {\n    return this._view[index];\n  }\n  rawSet(index, value) {\n    this._view[index] = value;\n    this.updateExtrema(value);\n  }\n  get(index) {\n    return new Date(this._view[index]);\n  }\n  set(index, value) {\n    const time = value.getTime();\n    this._view[index] = time;\n    this.updateExtrema(time);\n  }\n}\nclass BaseNumberChunk extends BufferChunk {\n  constructor(length, offset, bytes2, shared) {\n    super(DataType.Number, length, offset);\n    this._data = buffer(length * bytes2, shared);\n    this._min = Number.POSITIVE_INFINITY;\n    this._max = Number.NEGATIVE_INFINITY;\n  }\n  get view() {\n    return this._view;\n  }\n  get min() {\n    return this._min;\n  }\n  get max() {\n    return this._max;\n  }\n  get(index) {\n    return this._view[index];\n  }\n  set(index, value) {\n    this._view[index] = value;\n    if (value < this._min)\n      this._min = value;\n    if (value > this._max)\n      this._max = value;\n  }\n}\nclass Int8Chunk extends BaseNumberChunk {\n  constructor(length, offset, shared) {\n    super(length, offset, bytes(DataType.Int8), shared);\n    this._view = new Int8Array(this._data);\n  }\n}\nclass Uint8Chunk extends BaseNumberChunk {\n  constructor(length, offset, shared) {\n    super(length, offset, bytes(DataType.Uint8), shared);\n    this._view = new Uint8Array(this._data);\n  }\n}\nclass Int16Chunk extends BaseNumberChunk {\n  constructor(length, offset, shared) {\n    super(length, offset, bytes(DataType.Int16), shared);\n    this._view = new Int16Array(this._data);\n  }\n}\nclass Uint16Chunk extends BaseNumberChunk {\n  constructor(length, offset, shared) {\n    super(length, offset, bytes(DataType.Uint16), shared);\n    this._view = new Uint16Array(this._data);\n  }\n}\nclass Int32Chunk extends BaseNumberChunk {\n  constructor(length, offset, shared) {\n    super(length, offset, bytes(DataType.Int32), shared);\n    this._view = new Int32Array(this._data);\n  }\n}\nclass Uint32Chunk extends BaseNumberChunk {\n  constructor(length, offset, shared) {\n    super(length, offset, bytes(DataType.Uint32), shared);\n    this._view = new Uint32Array(this._data);\n  }\n}\nclass Float32Chunk extends BaseNumberChunk {\n  constructor(length, offset, shared) {\n    super(length, offset, bytes(DataType.Float32), shared);\n    this._view = new Float32Array(this._data);\n  }\n}\nclass Float64Chunk extends BaseNumberChunk {\n  constructor(length, offset, shared) {\n    super(length, offset, bytes(DataType.Float64), shared);\n    this._view = new Float64Array(this._data);\n  }\n}\nclass StringChunk extends BaseChunk {\n  constructor(length, offset, shared) {\n    super(DataType.String, length, offset);\n    this._data = new Array(length);\n  }\n  get(index) {\n    return this._data[index];\n  }\n  set(index, value) {\n    this._data[index] = value;\n  }\n}\nfunction buildChunk(type, length, offset, shared) {\n  switch (type) {\n    case DataType.Number:\n    case DataType.Float32:\n      return new Float32Chunk(length, offset, shared);\n    case DataType.Int8:\n      return new Int8Chunk(length, offset, shared);\n    case DataType.Uint8:\n      return new Uint8Chunk(length, offset, shared);\n    case DataType.Int16:\n      return new Int16Chunk(length, offset, shared);\n    case DataType.Uint16:\n      return new Uint16Chunk(length, offset, shared);\n    case DataType.Int32:\n      return new Int32Chunk(length, offset, shared);\n    case DataType.Uint32:\n      return new Uint32Chunk(length, offset, shared);\n    case DataType.Float64:\n      return new Float64Chunk(length, offset, shared);\n    case DataType.Color:\n      return new ColorChunk(length, offset, shared);\n    case DataType.Date:\n      return new DateChunk(length, offset, shared);\n    case DataType.String:\n      return new StringChunk(length, offset, shared);\n    default:\n      return void 0;\n  }\n}\nfunction rebuildChunk(chunk, shared) {\n  const oc = chunk;\n  const nc = buildChunk(oc._type, 0, 0, shared);\n  return Object.assign(nc, chunk);\n}\nvar MessageType$1 = /* @__PURE__ */ ((MessageType2) => {\n  MessageType2[MessageType2[\"Start\"] = 0] = \"Start\";\n  MessageType2[MessageType2[\"Finished\"] = 1] = \"Finished\";\n  return MessageType2;\n})(MessageType$1 || {});\nvar MessageType = /* @__PURE__ */ ((MessageType2) => {\n  MessageType2[MessageType2[\"Setup\"] = 0] = \"Setup\";\n  MessageType2[MessageType2[\"AddChunk\"] = 1] = \"AddChunk\";\n  MessageType2[MessageType2[\"NoMoreChunks\"] = 2] = \"NoMoreChunks\";\n  MessageType2[MessageType2[\"Processed\"] = 3] = \"Processed\";\n  MessageType2[MessageType2[\"Finished\"] = 4] = \"Finished\";\n  return MessageType2;\n})(MessageType || {});\nconst mainWorker = self;\nlet setup;\nconst chunks = new Array();\nconst targetNumWorkers = 25;\nlet chunksPerWorker;\nlet totalBytes = 0;\nlet totalChunks = 0;\nlet nextWorker = 0;\nlet allChunksHandled = false;\nconst perfMon = new PerfMon();\nconst runningWorkers = /* @__PURE__ */ new Map();\nconst parsedChunks = /* @__PURE__ */ new Map();\nconst generatedChunks = /* @__PURE__ */ new Map();\nconst startRemainders = /* @__PURE__ */ new Map();\nconst endRemainders = /* @__PURE__ */ new Map();\nlet nextChunkToBeFinished = 0;\nlet chunkLengthSum = 0;\nmainWorker.onmessage = (e) => {\n  const msg = e.data;\n  switch (msg.type) {\n    case MessageType.Setup:\n      setup = msg.data;\n      break;\n    case MessageType.AddChunk:\n      onAddChunk(msg.data);\n      break;\n    case MessageType.NoMoreChunks:\n      onNoMoreChunks();\n      break;\n    default:\n      if (setup.options.verbose)\n        console.log(\"received invalid msg from frontend thread:\", msg);\n      break;\n  }\n};\nfunction onAddChunk(data) {\n  chunks.push(data.chunk);\n  if (!chunksPerWorker)\n    deductChunksPerWorker(data.chunk);\n  totalChunks++;\n  totalBytes += data.chunk.byteLength;\n  if (chunks.length < chunksPerWorker)\n    return;\n  startSubWorker();\n}\nfunction onNoMoreChunks() {\n  allChunksHandled = true;\n  startSubWorker();\n}\nfunction deductChunksPerWorker(chunk) {\n  if (setup.options.size) {\n    const bytesPerChunk = chunk.byteLength;\n    const estimatedChunks = this._size / bytesPerChunk;\n    chunksPerWorker = Math.ceil(estimatedChunks / targetNumWorkers);\n  } else {\n    chunksPerWorker = 100;\n  }\n}\nfunction startSubWorker() {\n  const numChunks = Math.max(chunks.length, chunksPerWorker);\n  const workerChunks = chunks.splice(0, numChunks);\n  const workerId = nextWorker++;\n  const subWorker = new Worker(\n    new URL(\"sub.js\", import.meta.url),\n    { type: \"module\" }\n  );\n  subWorker.onmessage = (e) => {\n    const msg2 = e.data;\n    if (e.data.type !== MessageType$1.Finished && setup.options.verbose) {\n      console.log(\"received invalid msg from sub worker:\", msg2);\n    }\n    onSubWorkerFinished(msg2.data, workerId);\n  };\n  const data = {\n    chunks: workerChunks,\n    columns: setup.columns,\n    generatedColumns: setup.generatedColumns,\n    options: {\n      delimiter: setup.options.delimiter,\n      includesHeader: setup.options.includesHeader && workerId === 0\n    },\n    lastChunk: allChunksHandled\n  };\n  const msg = {\n    type: MessageType$1.Start,\n    data\n  };\n  const label = `worker ${workerId}`;\n  if (setup.options.verbose)\n    console.log(\"starting \" + label);\n  runningWorkers.set(workerId, subWorker);\n  perfMon.start(workerId, label);\n  subWorker.postMessage(msg, [...workerChunks]);\n}\nfunction onSubWorkerFinished(data, workerId) {\n  perfMon.stop(workerId);\n  if (setup.options.verbose)\n    console.log(`worker ${workerId} done`);\n  const subWorker = runningWorkers.get(workerId);\n  runningWorkers.delete(workerId);\n  parsedChunks.set(\n    workerId,\n    data.chunks.map((c) => rebuildChunk(c, setup.options.sharedArrayBuffer))\n  );\n  generatedChunks.set(\n    workerId,\n    data.generatedChunks.map((c) => rebuildChunk(c, setup.options.sharedArrayBuffer))\n  );\n  startRemainders.set(workerId, data.startRemainder);\n  endRemainders.set(workerId, data.endRemainder);\n  let success = false;\n  do {\n    success = finishChunk();\n  } while (success);\n  if (allChunksHandled && runningWorkers.size === 0)\n    done();\n  subWorker.terminate();\n}\nfunction finishChunk() {\n  const parsed = parsedChunks.get(nextChunkToBeFinished);\n  const generated = generatedChunks.get(nextChunkToBeFinished);\n  const end = endRemainders.get(nextChunkToBeFinished);\n  const start = startRemainders.get(nextChunkToBeFinished + 1);\n  const lastChunk = allChunksHandled && nextWorker === nextChunkToBeFinished + 1;\n  const ready = parsed && generated && end && (start || lastChunk);\n  if (!ready)\n    return false;\n  if (!lastChunk) {\n    const buf = new Uint8Array(end.byteLength + (start?.byteLength ?? 0));\n    buf.set(new Uint8Array(end));\n    buf.set(new Uint8Array(start), end.byteLength);\n    handleRemainder(buf, parsed, generated);\n  }\n  parsed.forEach((chunk) => chunk.offset = chunkLengthSum);\n  generated.forEach((chunk) => chunk.offset = chunkLengthSum);\n  chunkLengthSum += parsed[0].length;\n  parsedChunks.delete(nextChunkToBeFinished);\n  generatedChunks.delete(nextChunkToBeFinished);\n  endRemainders.delete(nextChunkToBeFinished);\n  startRemainders.delete(nextChunkToBeFinished + 1);\n  const data = {\n    chunks: [...parsed, ...generated]\n  };\n  const msg = {\n    type: MessageType.Processed,\n    data\n  };\n  const transf = setup.options.sharedArrayBuffer ? data.chunks.map((c) => c.data) : [];\n  postMessage(msg, transf);\n  nextChunkToBeFinished++;\n  return true;\n}\nfunction handleRemainder(buf, parsed, generated) {\n  const text = new TextDecoder().decode(buf);\n  const valueTexts = splitLine(text, setup.options.delimiter);\n  const values = parseLine(valueTexts, setup.columns);\n  values.forEach((value, column) => storeValue(value, parsed[column].length - 1, parsed[column]));\n  const gen = setup.generatedColumns;\n  const genValues = gen.map((g) => g.func(valueTexts, values));\n  genValues.forEach(\n    (value, column) => storeValue(value, generated[column].length - 1, generated[column])\n  );\n}\nfunction done() {\n  const data = {\n    chunks: totalChunks,\n    bytes: totalBytes,\n    workers: nextWorker,\n    performance: perfMon.samples\n  };\n  const msg = {\n    type: MessageType.Finished,\n    data\n  };\n  postMessage(msg);\n}\nexport { mainWorker as default };\n//# sourceMappingURL=main.js.map\n"],"names":["DataType","DataType2","bytes","type","isFloat","isInt","DEFAULT_ALPHA","HEX_FORMAT_REGEX","hex2rgba","hex","failSilent","rgba","offset","length","stride","parseLine","line","types","cell","i","n","PerfMon","id","label","sample","splitLine","delimiter","cells","start","quote","quoteActive","push","end","skip","cellEnd","index","storeValue","value","chunk","buffer","shared","BaseChunk","BufferChunk","ColorChunk","DateChunk","time","BaseNumberChunk","bytes2","Int8Chunk","Uint8Chunk","Int16Chunk","Uint16Chunk","Int32Chunk","Uint32Chunk","Float32Chunk","Float64Chunk","StringChunk","buildChunk","rebuildChunk","nc","MessageType$1","MessageType2","MessageType","mainWorker","setup","chunks","targetNumWorkers","chunksPerWorker","totalBytes","totalChunks","nextWorker","allChunksHandled","perfMon","runningWorkers","parsedChunks","generatedChunks","startRemainders","endRemainders","nextChunkToBeFinished","chunkLengthSum","msg","onAddChunk","onNoMoreChunks","data","deductChunksPerWorker","startSubWorker","bytesPerChunk","estimatedChunks","numChunks","workerChunks","workerId","subWorker","e","msg2","onSubWorkerFinished","c","success","finishChunk","done","parsed","generated","lastChunk","buf","handleRemainder","transf","text","valueTexts","values","column","g"],"mappings":"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","x_google_ignoreList":[0]}