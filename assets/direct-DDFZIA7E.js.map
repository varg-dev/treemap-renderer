{"version":3,"file":"direct-DDFZIA7E.js","sources":["../../examples/direct-config/treemap.ts","../../examples/direct-config/index.html?html-proxy&index=1.js","../../examples/direct-config/index.html?html-proxy&index=2.js"],"sourcesContent":["\n\n/* spellchecker: disable */\n\nimport * as gloperate from 'webgl-operate';\n\nimport log = gloperate.auxiliaries.log;\nimport LogLevel = gloperate.auxiliaries.LogLevel;\n\nimport {\n    Configuration,\n    Renderer,\n    Visualization,\n    initialize\n} from '../../source/treemap-renderer';\n\nimport { Example } from '../example';\n\n/* spellchecker: enable */\n\n\n// tslint:disable:max-classes-per-file\n\nexport class DirectConfigTreemapExample extends Example {\n\n    protected obtainUrl(hash: string): string {\n        return window.location.origin + window.location.pathname + \"?data=\" + hash;\n    }\n\n    get canvas(): gloperate.Canvas {\n        return this._canvas;\n    }\n\n    get visualization(): Visualization {\n        return this._visualization;\n    }\n\n    get renderer(): Renderer {\n        return this._renderer;\n    }\n\n    private _canvas: gloperate.Canvas;\n    private _visualization: Visualization;\n    private _renderer: Renderer;\n\n\n    validate(element: HTMLCanvasElement | string): boolean {\n        return this.initialize(element);\n        // return false;\n    }\n\n    preview(element: HTMLCanvasElement | string): boolean {\n        return this.initialize(element);\n        // return false;\n    }\n\n    feature(element: HTMLCanvasElement | string): boolean {\n\n        const dataElement = window.document.getElementById('csv-data')! as HTMLTextAreaElement;\n        const hashElement = window.document.getElementById('data-hash')! as HTMLPreElement;\n        const reloadElement = window.document.getElementById('reload')! as HTMLButtonElement;\n        const configElement = window.document.getElementById('config-display')! as HTMLPreElement;\n\n        const success = this.initialize(element);\n\n        const renderer = this._visualization.renderer as Renderer;\n        const canvas = this._canvas as gloperate.Canvas;\n        const visualization = this._visualization;\n\n        const fullscreenTarget = canvas.element;\n\n        window.document.getElementById('fullscreen')!.onclick = () => {\n            gloperate.viewer.Fullscreen.toggle(fullscreenTarget);\n        };\n\n        const loadConfig = (configString: string) => {\n            let configData = {};\n\n            try {\n                configData = JSON.parse(configString);\n            } catch (error) {\n                console.log(error);\n\n                return;\n            }\n\n            const oldConfig = visualization.configuration;\n\n            try {\n                const config = new Configuration();\n\n                if (oldConfig !== undefined) {\n                    config.topology = oldConfig.topology;\n                    config.layout = oldConfig.layout;\n                    config.buffers = oldConfig.buffers;\n                    config.bufferViews = oldConfig.bufferViews;\n                    config.colors = oldConfig.colors;\n                    config.geometry = oldConfig.geometry;\n                    config.labels = oldConfig.labels;\n                }\n\n                config.topology = (configData as Configuration).topology || {};\n                config.layout = (configData as Configuration).layout || {};\n                config.buffers = (configData as Configuration).buffers || [];\n                config.bufferViews = (configData as Configuration).bufferViews || [];\n                config.colors = (configData as Configuration).colors || [];\n                config.geometry = (configData as Configuration).geometry || {};\n                config.labels = (configData as Configuration).labels || {};\n\n                visualization.configuration = config;\n                visualization.update();\n                renderer.invalidate();\n\n                if (configElement) {\n                    configElement.textContent = JSON.stringify(config.toJSON(), null, 2);\n                }\n            }\n            catch (error) {\n                console.log(error);\n\n                if (oldConfig === undefined) {\n                    return;\n                }\n\n                const rescueConfig = new Configuration();\n\n                rescueConfig.topology = oldConfig.topology;\n                rescueConfig.layout = oldConfig.layout;\n                rescueConfig.buffers = oldConfig.buffers;\n                rescueConfig.bufferViews = oldConfig.bufferViews;\n                rescueConfig.colors = oldConfig.colors;\n                rescueConfig.geometry = oldConfig.geometry;\n                rescueConfig.labels = oldConfig.labels;\n\n                visualization.configuration = rescueConfig;\n                visualization.update();\n                renderer.invalidate();\n            }\n        };\n\n        // export variables\n\n        (window as any)['gloperate'] = gloperate;\n\n        (window as any)['canvas'] = canvas;\n        (window as any)['context'] = canvas.context;\n        (window as any)['controller'] = canvas.controller;\n\n        (window as any)['visualization'] = visualization;\n        (window as any)['renderer'] = renderer;\n\n        if (dataElement) {\n            const searchParams = new URLSearchParams(window.location.search);\n            const data = searchParams.get('data');\n\n            if (data) {\n                log(LogLevel.Debug, \"Load from\", data);\n                dataElement.value = atob(data);\n                // TODO: refactor to use Buffer.from(data, 'base64')\n            }\n\n            dataElement.oninput = (event) => {\n                const testdata = dataElement.value;\n\n                loadConfig(testdata);\n\n                if (hashElement) {\n                    hashElement.textContent = this.obtainUrl(btoa(testdata));\n                }\n            };\n            dataElement.oninput({} as Event); // initial load\n        }\n\n        if (reloadElement && hashElement) {\n            reloadElement.onclick = (event) => {\n                if (hashElement.textContent && hashElement.textContent !== \"\") {\n                    window.location.href = hashElement.textContent! as string;\n                }\n            };\n        }\n\n        return success && dataElement !== undefined && dataElement !== null;\n    }\n\n\n    initialize(element: HTMLCanvasElement | string): boolean {\n\n        this._canvas = initialize(element);\n\n        this._visualization = new Visualization();\n        const renderer: Renderer = this._visualization.renderer as Renderer;\n        this._canvas.renderer = renderer;\n\n        super.expose();\n\n        return true;\n    }\n\n    uninitialize(): void {\n        this._canvas.dispose();\n        (this._renderer as gloperate.Renderer).uninitialize();\n    }\n\n}\n","\n        import { DirectConfigTreemapExample } from './treemap.ts';\n\n        window.onload = function () {\n\n            const canvas = document.getElementById('canvas');\n            const exampleRenderer = new DirectConfigTreemapExample();\n            window['example'] = exampleRenderer;\n            exampleRenderer.feature(canvas);\n\n            const aboutCode = window.document.getElementById('context-about');\n            if (aboutCode) {\n                aboutCode.innerText = context.aboutString();\n            }\n        };\n    ","\n        import * as treemaprenderer from '/examples/index.ts';\n        window['treemaprenderer'] = treemaprenderer;\n        document.title = __LIB_NAME__;\n        document.querySelector('#version').innerHTML = treemaprenderer.version();\n        document.querySelector('#branch').innerHTML = treemaprenderer.branch();\n        document.querySelector('#commit').innerHTML = treemaprenderer.commit();\n        document.querySelector('#cryear').innerHTML = new Date().getFullYear();\n    "],"names":["log","gloperate.auxiliaries","LogLevel","DirectConfigTreemapExample","Example","hash","element","dataElement","hashElement","reloadElement","configElement","success","renderer","canvas","visualization","fullscreenTarget","gloperate.viewer","loadConfig","configString","configData","error","oldConfig","config","Configuration","rescueConfig","gloperate","data","event","testdata","initialize","Visualization","exampleRenderer","aboutCode","treemaprenderer","treemaprenderer.version","treemaprenderer.branch","treemaprenderer.commit"],"mappings":"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"}