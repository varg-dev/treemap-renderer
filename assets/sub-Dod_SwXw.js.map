{"version":3,"file":"sub-Dod_SwXw.js","sources":["../node_modules/@hpicgs/cbd-parser/lib/sub.js"],"sourcesContent":["function splitLines(chunk, lines, remainder = \"\") {\n  let start = 0;\n  let newLine;\n  while ((newLine = chunk.indexOf(\"\\n\", start)) !== -1) {\n    const hasReturn = chunk.charAt(newLine - 1) === \"\\r\";\n    const str = chunk.substring(start, newLine - (hasReturn ? 1 : 0));\n    if (start === 0) {\n      lines.push(remainder + str);\n    } else {\n      lines.push(str);\n    }\n    start = newLine + 1;\n  }\n  return chunk.substring(start);\n}\nfunction parse(chunks, start, end) {\n  if (start.chunk === end.chunk) {\n    return parseSingleChunk(chunks[start.chunk], start, end);\n  }\n  return parseMultipleChunks(chunks, start, end);\n}\nfunction parseSingleChunk(chunk, start, end) {\n  const decoder = new TextDecoder();\n  const lines = new Array();\n  const buffer2 = new Uint8Array(chunk, start.char, end.char - start.char);\n  const remainder = splitLines(decoder.decode(buffer2), lines);\n  lines.push(remainder);\n  return lines;\n}\nfunction parseMultipleChunks(chunks, start, end) {\n  const decoder = new TextDecoder();\n  const expectMore = { stream: true };\n  const lines = new Array();\n  let remainder = \"\";\n  const first = new Uint8Array(chunks[start.chunk], start.char);\n  remainder = splitLines(decoder.decode(first, expectMore), lines, remainder);\n  for (let i = start.chunk + 1; i < end.chunk; i++) {\n    remainder = splitLines(decoder.decode(chunks[i], expectMore), lines, remainder);\n  }\n  const last = new Uint8Array(chunks[end.chunk], 0, end.char);\n  remainder = splitLines(decoder.decode(last), lines, remainder);\n  lines.push(remainder);\n  return lines;\n}\nvar DataType = /* @__PURE__ */ ((DataType2) => {\n  DataType2[\"Number\"] = \"number\";\n  DataType2[\"Int8\"] = \"int8\";\n  DataType2[\"Uint8\"] = \"uint8\";\n  DataType2[\"Int16\"] = \"int16\";\n  DataType2[\"Uint16\"] = \"uint16\";\n  DataType2[\"Int32\"] = \"int32\";\n  DataType2[\"Uint32\"] = \"uint32\";\n  DataType2[\"Float32\"] = \"float32\";\n  DataType2[\"Float64\"] = \"float64\";\n  DataType2[\"Color\"] = \"color\";\n  DataType2[\"String\"] = \"string\";\n  DataType2[\"Date\"] = \"date\";\n  return DataType2;\n})(DataType || {});\nfunction bytes(type) {\n  switch (type) {\n    case \"int8\":\n    case \"uint8\":\n      return 1;\n    case \"int16\":\n    case \"uint16\":\n      return 2;\n    case \"int32\":\n    case \"uint32\":\n    case \"float32\":\n    case \"number\":\n      return 4;\n    case \"float64\":\n    case \"date\":\n      return 8;\n    case \"color\":\n      return 16;\n    case \"string\":\n    default:\n      return 0;\n  }\n}\nfunction isFloat(type) {\n  switch (type) {\n    case \"number\":\n    case \"float32\":\n    case \"float64\":\n      return true;\n    default:\n      return false;\n  }\n}\nfunction isInt(type) {\n  switch (type) {\n    case \"int8\":\n    case \"uint8\":\n    case \"int16\":\n    case \"uint16\":\n    case \"int32\":\n    case \"uint32\":\n      return true;\n    default:\n      return false;\n  }\n}\nconst DEFAULT_ALPHA = 1;\nconst HEX_FORMAT_REGEX = new RegExp(/^(#|0x)?(([0-9a-f]{3}){1,2}|([0-9a-f]{4}){1,2})$/i);\nfunction hex2rgba(hex, failSilent = false) {\n  const rgba = [0, 0, 0, DEFAULT_ALPHA];\n  if (!HEX_FORMAT_REGEX.test(hex)) {\n    if (!failSilent) {\n      console.warn(\n        \"hexadecimal RGBA color string must conform to either\",\n        \"#0000, or #00000000, given\",\n        hex\n      );\n    }\n    return rgba;\n  }\n  const offset = hex.startsWith(\"0x\") ? 2 : hex.startsWith(\"#\") ? 1 : 0;\n  const length = Math.floor((hex.length - offset) / 3);\n  const stride = length - 1;\n  rgba[0] = parseInt(hex[offset + 0 * length] + hex[offset + 0 * length + stride], 16) / 255;\n  rgba[1] = parseInt(hex[offset + 1 * length] + hex[offset + 1 * length + stride], 16) / 255;\n  rgba[2] = parseInt(hex[offset + 2 * length] + hex[offset + 2 * length + stride], 16) / 255;\n  if (hex.length - offset === 4 || hex.length - offset === 8) {\n    rgba[3] = parseInt(hex[offset + 3 * length] + hex[offset + 3 * length + stride], 16) / 255;\n  }\n  if (!failSilent && (isNaN(rgba[0]) || isNaN(rgba[1]) || isNaN(rgba[2]) || isNaN(rgba[3]))) {\n    console.warn(`expected well formatted hexadecimal RGBA string, given '${hex}'`);\n  }\n  return rgba;\n}\nfunction parseLine(line, types) {\n  return line.map((cell, i) => {\n    if (isFloat(types[i]))\n      return Number.parseFloat(cell);\n    if (isInt(types[i]))\n      return Number.parseInt(cell);\n    switch (types[i]) {\n      case DataType.Color:\n        return hex2rgba(cell);\n      case DataType.Date: {\n        let n = Date.parse(cell);\n        if (isNaN(n))\n          n = Number.parseInt(cell);\n        return new Date(n);\n      }\n      case DataType.String:\n        return cell;\n      default:\n        return void 0;\n    }\n  });\n}\nfunction buffer(length, shared2) {\n  if (shared2)\n    return new SharedArrayBuffer(length);\n  else\n    return new ArrayBuffer(length);\n}\nfunction findLastIndex(array, predicate) {\n  let l = array.length;\n  while (l--) {\n    if (predicate(array[l], l, array))\n      return l;\n  }\n  return -1;\n}\nfunction detectRemainders(chunks, shared2) {\n  const lf = 10;\n  const cr = 13;\n  const start = { chunk: 0, char: 0 };\n  const end = { chunk: 0, char: 0 };\n  let startRemainder;\n  let endRemainder;\n  let remainderLength = 0;\n  for (let i = 0; i < chunks.length; i++) {\n    const chunk = new Uint8Array(chunks[i]);\n    const lfPos = chunk.findIndex((c) => c === lf);\n    if (lfPos < 0) {\n      remainderLength += chunk.length;\n      continue;\n    }\n    if (lfPos < chunk.length - 1) {\n      start.chunk = i;\n      start.char = lfPos + 1;\n    } else {\n      start.chunk = i + 1;\n      start.char = 0;\n    }\n    const crFix = chunk[lfPos - 1] === cr ? -1 : 0;\n    startRemainder = buffer(remainderLength + lfPos + crFix, shared2);\n    break;\n  }\n  let remainderIndex = 0;\n  remainderLength = startRemainder.byteLength;\n  for (let i = 0; i <= start.chunk; i++) {\n    let chunk = new Uint8Array(chunks[i]);\n    if (chunk.length > remainderLength - remainderIndex - 1) {\n      chunk = chunk.subarray(0, remainderLength - remainderIndex);\n    }\n    new Uint8Array(startRemainder).set(chunk, remainderIndex);\n    remainderIndex += chunk.length;\n  }\n  remainderLength = 0;\n  for (let i = chunks.length - 1; i >= 0; i--) {\n    const chunk = new Uint8Array(chunks[i]);\n    const lfPos = findLastIndex(chunk, (c) => c === lf);\n    if (lfPos < 0) {\n      remainderLength += chunk.length;\n      continue;\n    }\n    end.chunk = i;\n    end.char = lfPos;\n    endRemainder = buffer(remainderLength + chunk.length - 1 - lfPos, shared2);\n    break;\n  }\n  remainderIndex = endRemainder.byteLength - 1;\n  remainderLength = endRemainder.byteLength;\n  for (let i = chunks.length - 1; i >= end.chunk; i--) {\n    let chunk = new Uint8Array(chunks[i]);\n    if (chunk.length > remainderIndex) {\n      chunk = chunk.subarray(chunk.length - remainderIndex - 1);\n    }\n    new Uint8Array(endRemainder).set(chunk, remainderIndex - chunk.length + 1);\n    remainderIndex -= chunk.length;\n  }\n  return { startRemainder, start, endRemainder, end };\n}\nfunction splitLine(line, delimiter) {\n  const cells = new Array();\n  let start = 0;\n  let quote = false;\n  let quoteActive = false;\n  const push = (end) => {\n    cells.push(line.substring(quote ? start + 1 : start, quote ? end - 1 : end));\n  };\n  for (let i = 0; i < line.length; i++) {\n    const char = line.charAt(i);\n    if (char === '\"') {\n      quoteActive = !quoteActive;\n      quote = true;\n      continue;\n    }\n    if (quoteActive) {\n      continue;\n    }\n    const { end, skip } = cellEnd(line, i, delimiter);\n    if (end) {\n      push(i);\n      start = i + skip;\n      quote = false;\n    }\n  }\n  push(void 0);\n  return cells;\n}\nfunction cellEnd(line, index, delimiter) {\n  const char = line.charAt(index);\n  switch (char) {\n    case delimiter:\n    case \"\\n\":\n      return { end: true, skip: 1 };\n    case \"\\r\":\n      if (line.charAt(index + 1) === \"\\n\") {\n        return { end: true, skip: 2 };\n      }\n    default:\n      return { end: false, skip: 0 };\n  }\n}\nfunction storeValue(value, index, chunk) {\n  switch (chunk.type) {\n    case DataType.Number:\n      chunk.set(index, value);\n      break;\n    case DataType.Color:\n      chunk.set(index, value);\n      break;\n    case DataType.Date:\n      chunk.set(index, value);\n      break;\n    case DataType.String:\n      chunk.set(index, value);\n      break;\n  }\n}\nclass BaseChunk {\n  constructor(type, length, offset) {\n    this._type = type;\n    this._length = length;\n    this._offset = offset;\n  }\n  get type() {\n    return this._type;\n  }\n  get length() {\n    return this._length;\n  }\n  get offset() {\n    return this._offset;\n  }\n  set offset(offset) {\n    this._offset = offset;\n  }\n}\nclass BufferChunk extends BaseChunk {\n  get data() {\n    return this._data;\n  }\n}\nclass ColorChunk extends BufferChunk {\n  constructor(length, offset, shared2) {\n    super(DataType.Color, length, offset);\n    this._data = buffer(length * 4 * 4, shared2);\n    this._view = new Float32Array(this._data);\n  }\n  get view() {\n    return this._view;\n  }\n  get(index) {\n    return Array.from(this._view.subarray(index * 4, (index + 1) * 4));\n  }\n  set(index, value) {\n    this._view.set(value, index * 4);\n  }\n}\nclass DateChunk extends BufferChunk {\n  constructor(length, offset, shared2) {\n    super(DataType.Date, length, offset);\n    this._data = buffer(length * bytes(DataType.Date), shared2);\n    this._view = new Float64Array(this._data);\n    this._min = Number.POSITIVE_INFINITY;\n    this._max = Number.NEGATIVE_INFINITY;\n  }\n  get view() {\n    return this._view;\n  }\n  get rawMin() {\n    return this._min;\n  }\n  get rawMax() {\n    return this._max;\n  }\n  get min() {\n    return new Date(this._min);\n  }\n  get max() {\n    return new Date(this._max);\n  }\n  updateExtrema(value) {\n    if (value < this._min)\n      this._min = value;\n    if (value > this._max)\n      this._max = value;\n  }\n  rawGet(index) {\n    return this._view[index];\n  }\n  rawSet(index, value) {\n    this._view[index] = value;\n    this.updateExtrema(value);\n  }\n  get(index) {\n    return new Date(this._view[index]);\n  }\n  set(index, value) {\n    const time = value.getTime();\n    this._view[index] = time;\n    this.updateExtrema(time);\n  }\n}\nclass BaseNumberChunk extends BufferChunk {\n  constructor(length, offset, bytes2, shared2) {\n    super(DataType.Number, length, offset);\n    this._data = buffer(length * bytes2, shared2);\n    this._min = Number.POSITIVE_INFINITY;\n    this._max = Number.NEGATIVE_INFINITY;\n  }\n  get view() {\n    return this._view;\n  }\n  get min() {\n    return this._min;\n  }\n  get max() {\n    return this._max;\n  }\n  get(index) {\n    return this._view[index];\n  }\n  set(index, value) {\n    this._view[index] = value;\n    if (value < this._min)\n      this._min = value;\n    if (value > this._max)\n      this._max = value;\n  }\n}\nclass Int8Chunk extends BaseNumberChunk {\n  constructor(length, offset, shared2) {\n    super(length, offset, bytes(DataType.Int8), shared2);\n    this._view = new Int8Array(this._data);\n  }\n}\nclass Uint8Chunk extends BaseNumberChunk {\n  constructor(length, offset, shared2) {\n    super(length, offset, bytes(DataType.Uint8), shared2);\n    this._view = new Uint8Array(this._data);\n  }\n}\nclass Int16Chunk extends BaseNumberChunk {\n  constructor(length, offset, shared2) {\n    super(length, offset, bytes(DataType.Int16), shared2);\n    this._view = new Int16Array(this._data);\n  }\n}\nclass Uint16Chunk extends BaseNumberChunk {\n  constructor(length, offset, shared2) {\n    super(length, offset, bytes(DataType.Uint16), shared2);\n    this._view = new Uint16Array(this._data);\n  }\n}\nclass Int32Chunk extends BaseNumberChunk {\n  constructor(length, offset, shared2) {\n    super(length, offset, bytes(DataType.Int32), shared2);\n    this._view = new Int32Array(this._data);\n  }\n}\nclass Uint32Chunk extends BaseNumberChunk {\n  constructor(length, offset, shared2) {\n    super(length, offset, bytes(DataType.Uint32), shared2);\n    this._view = new Uint32Array(this._data);\n  }\n}\nclass Float32Chunk extends BaseNumberChunk {\n  constructor(length, offset, shared2) {\n    super(length, offset, bytes(DataType.Float32), shared2);\n    this._view = new Float32Array(this._data);\n  }\n}\nclass Float64Chunk extends BaseNumberChunk {\n  constructor(length, offset, shared2) {\n    super(length, offset, bytes(DataType.Float64), shared2);\n    this._view = new Float64Array(this._data);\n  }\n}\nclass StringChunk extends BaseChunk {\n  constructor(length, offset, shared2) {\n    super(DataType.String, length, offset);\n    this._data = new Array(length);\n  }\n  get(index) {\n    return this._data[index];\n  }\n  set(index, value) {\n    this._data[index] = value;\n  }\n}\nfunction buildChunk(type, length, offset, shared2) {\n  switch (type) {\n    case DataType.Number:\n    case DataType.Float32:\n      return new Float32Chunk(length, offset, shared2);\n    case DataType.Int8:\n      return new Int8Chunk(length, offset, shared2);\n    case DataType.Uint8:\n      return new Uint8Chunk(length, offset, shared2);\n    case DataType.Int16:\n      return new Int16Chunk(length, offset, shared2);\n    case DataType.Uint16:\n      return new Uint16Chunk(length, offset, shared2);\n    case DataType.Int32:\n      return new Int32Chunk(length, offset, shared2);\n    case DataType.Uint32:\n      return new Uint32Chunk(length, offset, shared2);\n    case DataType.Float64:\n      return new Float64Chunk(length, offset, shared2);\n    case DataType.Color:\n      return new ColorChunk(length, offset, shared2);\n    case DataType.Date:\n      return new DateChunk(length, offset, shared2);\n    case DataType.String:\n      return new StringChunk(length, offset, shared2);\n    default:\n      return void 0;\n  }\n}\nvar MessageType = /* @__PURE__ */ ((MessageType2) => {\n  MessageType2[MessageType2[\"Start\"] = 0] = \"Start\";\n  MessageType2[MessageType2[\"Finished\"] = 1] = \"Finished\";\n  return MessageType2;\n})(MessageType || {});\nconst subWorker = self;\nlet shared;\nsubWorker.onmessage = (e) => {\n  const msg = e.data;\n  if (e.data.type !== MessageType.Start) {\n    console.log(\"received invalid msg from sub worker:\", msg);\n  }\n  onStart(msg.data);\n};\nfunction onStart(data) {\n  shared = data.options.sharedArrayBuffer;\n  const remainders = detectRemainders(data.chunks, shared);\n  const lines = parse(data.chunks, remainders.start, remainders.end).map(\n    (l) => splitLine(l, data.options.delimiter)\n  );\n  const numChunks = lines.length + +!data.lastChunk;\n  const chunks = data.columns.map((c) => buildChunk(c, numChunks, 0, shared));\n  const values = lines.map((l) => parseLine(l, data.columns));\n  values.forEach((line, li) => line.forEach((value, vi) => storeValue(value, li, chunks[vi])));\n  const gen = data.generatedColumns;\n  const generatedChunks = gen.map((c) => buildChunk(c.type, numChunks, 0, shared));\n  lines.forEach((line, li) => {\n    const genValues = gen.map((g) => g.func(line, values[li]));\n    genValues.forEach((value, vi) => storeValue(value, li, generatedChunks[vi]));\n  });\n  sendFinished(chunks, generatedChunks, remainders);\n}\nfunction sendFinished(chunks, generatedChunks, rem) {\n  const data = {\n    chunks,\n    generatedChunks,\n    startRemainder: rem.startRemainder,\n    endRemainder: rem.endRemainder\n  };\n  const msg = {\n    type: MessageType.Finished,\n    data\n  };\n  const transf = shared ? data.chunks.map((c) => c.data) : [];\n  postMessage(msg, transf);\n}\nexport { subWorker as default };\n//# sourceMappingURL=sub.js.map\n"],"names":["splitLines","chunk","lines","remainder","start","newLine","hasReturn","str","parse","chunks","end","parseSingleChunk","parseMultipleChunks","decoder","buffer2","expectMore","first","i","last","DataType","DataType2","bytes","type","isFloat","isInt","DEFAULT_ALPHA","HEX_FORMAT_REGEX","hex2rgba","hex","failSilent","rgba","offset","length","stride","parseLine","line","types","cell","n","buffer","shared2","findLastIndex","array","predicate","l","detectRemainders","startRemainder","endRemainder","remainderLength","lfPos","c","crFix","remainderIndex","splitLine","delimiter","cells","quote","quoteActive","push","skip","cellEnd","index","storeValue","value","BaseChunk","BufferChunk","ColorChunk","DateChunk","time","BaseNumberChunk","bytes2","Int8Chunk","Uint8Chunk","Int16Chunk","Uint16Chunk","Int32Chunk","Uint32Chunk","Float32Chunk","Float64Chunk","StringChunk","buildChunk","MessageType","MessageType2","subWorker","shared","msg","onStart","data","remainders","numChunks","values","li","vi","gen","generatedChunks","g","sendFinished","rem","transf"],"mappings":"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","x_google_ignoreList":[0]}