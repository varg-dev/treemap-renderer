{"version":3,"file":"implicit-DJEkfEz8.js","sources":["../../examples/csv-with-implicit-inner-nodes/csvdata.ts","../../examples/csv-with-implicit-inner-nodes/treemap.ts","../../examples/csv-with-implicit-inner-nodes/index.html?html-proxy&index=1.js","../../examples/csv-with-implicit-inner-nodes/index.html?html-proxy&index=2.js"],"sourcesContent":["\n/* spellchecker: disable */\n\nimport * as gloperate from 'webgl-operate';\n\nimport log = gloperate.auxiliaries.log;\nimport LogLevel = gloperate.auxiliaries.LogLevel;\n\nimport { parse } from 'papaparse';\n\nimport { Configuration, Topology, NodeSort } from '../../source/treemap-renderer';\n\n/* spellchecker: enable */\n\n\nexport class CSVHeader {\n    public path_column: string;\n    public weight_column: string;\n    public height_column: string;\n    public color_column: string;\n    public label_column: string;\n};\n\nclass Edge {\n    public parentIndex;\n    public index;\n};\n\n\nexport class CSVData {\n    protected static readonly CSV_FIELD_DELIMITER = ';';\n\n    protected static readonly FAILED = (url: string, request: XMLHttpRequest) =>\n        `fetching '${url}' failed (${request.status}): ${request.statusText}`;\n\n    protected static initializeHeader(header: CSVHeader): void {\n        header.path_column = 'name';\n    }\n\n    protected static initializeConfig(config: Configuration): void {\n        config.colors = [\n            { identifier: 'emphasis', colorspace: 'hex', value: '#00b0ff' },\n            { identifier: 'auxiliary', colorspace: 'hex', values: ['#00aa5e', '#71237c'] },\n            { identifier: 'inner', colorspace: 'hex', values: ['#e8eaee', '#eef0f4'] },\n            { identifier: 'leaf', preset: 'Greens', steps: 7 },\n        ];\n\n        config.layout = {\n            algorithm: 'snake',\n            weight: 'bufferView:weights',\n            sort: {\n                key: 'bufferView:weights',\n                algorithm: NodeSort.Algorithm.Keep\n            },\n            parentPadding: { type: 'relative', value: 0.05 },\n            siblingMargin: { type: 'relative', value: 0.05 },\n            accessoryPadding: {\n                type: 'absolute',\n                direction: 'bottom',\n                value: [0.0, 0.02, 0.01, 0.0],\n                relativeAreaThreshold: 0.4, targetAspectRatio: 8.0,\n            },\n        };\n\n        config.geometry = {\n            parentLayer: { showRoot: false },\n            leafLayer: {\n                colorMap: 'color:leaf',\n                height: 'bufferView:heights-normalized',\n                colors: 'bufferView:colors-normalized',\n            },\n            emphasis: { outline: new Array<number>(), highlight: new Array<number>() },\n            heightScale: 0.5,\n        };\n\n        config.labels = {\n            innerNodeLayerRange: [1, 2],\n            numTopInnerNodes: 50,\n            numTopWeightNodes: 50,\n            numTopHeightNodes: 50,\n            numTopColorNodes: 50,\n        };\n    }\n\n    protected static parseHeader(lines: Array<string>, header: CSVHeader): void {\n        while (lines.length >= 1 && lines[0].startsWith('#')) {\n            const line = lines.shift()!.substring(1).trim();\n\n            const [key, value] = line.split('=').map((s: string) => s.trim());\n\n            if (key == 'paths') {\n                header.path_column = value;\n            } else if (key == 'weights') {\n                header.weight_column = value;\n            } else if (key == 'heights') {\n                header.height_column = value;\n            } else if (key == 'colors') {\n                header.color_column = value;\n            } else if (key == 'labels') {\n                header.label_column = value;\n            } else {\n                log(LogLevel.Warning, `Unparsed header`, key, '=', value);\n            }\n        }\n    }\n\n    protected static parsePapaparseResult(result: any, header: CSVHeader, config: Configuration): void {\n        const collect_string_column = (result: any, name: string): Array<string> => {\n            if (result.meta.fields.indexOf(name) < 0) {\n                const column = new Array<string>(result.data.length);\n                return column;\n            }\n\n            const column = (result.data as Array<string>).map((row: any) => {\n                return row[name] ? row[name] : \"\";\n            });\n\n            return column;\n        };\n\n        const collect_column = (result: any, name: string) => {\n            if (result.meta.fields.indexOf(name) < 0) {\n                const column = new Array(result.data.length);\n                return column;\n            }\n\n            const column = result.data.map((row: any) => {\n                return row[name] ? parseFloat(row[name]) : -1.0;\n            });\n\n            return column;\n        };\n\n        const has_labels_column = (name: string) => result.meta.fields.indexOf(name) >= 0;\n\n        // parse edges\n\n        const paths = collect_string_column(result, header.path_column);\n        for (let i = 0; i < paths.length; ++i) {\n            paths[i] = paths[i].replace(\"./\", \"\");\n        }\n        const pathParts = paths.map((value: string) => value.split('/'));\n\n        // parse weights\n\n        const leafWeights = collect_column(result, header.weight_column);\n\n        // parse heights\n\n        const leafHeights = collect_column(result, header.height_column);\n\n        // parse colors\n\n        const leafColors = collect_column(result, header.color_column);\n\n        // parse labels\n\n        const labels = has_labels_column(header.label_column) ?\n            collect_string_column(result, header.label_column) :\n            pathParts.map((parts: string[]) => parts.at(-1));\n\n        // Load topology\n\n        const createNode = (index: number, parentIndex: number): Edge => {\n            return { parentIndex, index } as Edge;\n        };\n\n        const gatherParentKey = (parts: string[], index: number): string => {\n            return \"/\" + parts.slice(0, index).join('/');\n        }\n\n        const edges = new Array<Configuration.NodeIdentifier>();\n        const names = new Map<number, string>();\n        const weights = new Array<number>();\n        const heights = new Array<number>();\n        const colors = new Array<number>();\n\n        const nodes = {};\n        let currentIndex = -1;\n\n        // Create root\n        nodes['/'] = createNode(currentIndex, -1);\n        currentIndex += 1;\n        weights.push(0);\n        heights.push(0);\n        colors.push(0);\n\n        // Create inner nodes and leaf nodes\n        pathParts.forEach((parts: Array<string>, partIndex: number) => {\n            parts.forEach((value: string, index: number) => {\n                const parentKey = gatherParentKey(parts, index);\n                const key = gatherParentKey(parts, index + 1);\n\n                if (!(parentKey in nodes)) {\n                    log(LogLevel.Warning, parentKey, 'not in', nodes);\n                    return;\n                }\n\n                if (key in nodes) {\n                    // Inner node already created\n                    return;\n                }\n\n                nodes[key] = createNode(currentIndex, nodes[parentKey].index);\n                edges.push(nodes[key].parentIndex);\n                edges.push(currentIndex);\n                names.set(currentIndex, value);\n                currentIndex += 1;\n\n                if (index == parts.length - 1) {\n                    // Is leaf node\n                    weights.push(leafWeights[partIndex]);\n                    heights.push(leafHeights[partIndex]);\n                    colors.push(leafColors[partIndex]);\n                } else {\n                    // Is inner node\n                    weights.push(0);\n                    heights.push(0);\n                    colors.push(0);\n                }\n            });\n        });\n\n        config.topology = {\n            edges: edges,\n            semantics: Topology.InputSemantics.ParentIdId,\n            format: Topology.InputFormat.Interleaved,\n        };\n\n        config.buffers = [\n            {\n                identifier: 'source-weights',\n                type: 'numbers',\n                data: weights,\n                linearization: 'topology',\n            },\n            {\n                identifier: 'source-heights',\n                type: 'numbers',\n                data: heights,\n                linearization: 'topology',\n            },\n            {\n                identifier: 'source-colors',\n                type: 'numbers',\n                data: colors,\n                linearization: 'topology',\n            }\n        ];\n\n        config.bufferViews = [\n            {\n                identifier: 'weights',\n                source: 'buffer:source-weights',\n                transformations: [\n                    { type: 'fill-invalid', value: 0.0, invalidValue: -1.0 },\n                    { type: 'propagate-up', operation: 'sum' }\n                ],\n            },\n            {\n                identifier: 'heights-normalized',\n                source: 'buffer:source-heights',\n                transformations: [\n                    { type: 'fill-invalid', value: 0.0, invalidValue: -1.0 },\n                    { type: 'normalize', operation: 'zero-to-max' }\n                ],\n            },\n            {\n                identifier: 'colors-normalized',\n                source: 'buffer:source-colors',\n                transformations: [\n                    { type: 'fill-invalid', value: 0.0, invalidValue: -1.0 },\n                    { type: 'normalize', operation: 'zero-to-max' }\n                ],\n            }\n        ];\n\n        config.labels.names = names;\n\n        config.altered.alter('any');\n    }\n\n    static loadAsync(data: string): Promise<Configuration> {\n        const header = new CSVHeader();\n\n        CSVData.initializeHeader(header);\n\n        const lines = data.split('\\n');\n\n        CSVData.parseHeader(lines, header);\n\n        const payload = lines.join('\\n');\n\n        return this.loadAsyncHeader(payload, header);\n    }\n\n    static loadAsyncHeader(data: string, header: CSVHeader): Promise<Configuration> {\n        return new Promise<Configuration>((resolve, reject) => {\n            const config = new Configuration();\n\n            CSVData.initializeConfig(config);\n\n            parse(data, {\n                error: (error: any) => reject(error),\n                complete: (result) => {\n                    CSVData.parsePapaparseResult(result, header, config);\n\n                    resolve(config);\n                },\n                delimiter: CSVData.CSV_FIELD_DELIMITER,\n                quoteChar: '\"',\n                escapeChar: '\"',\n                header: true,\n                comments: '#',\n                skipEmptyLines: true\n            });\n        });\n    }\n\n}\n","\n\n/* spellchecker: disable */\n\nimport * as gloperate from 'webgl-operate';\n\nimport log = gloperate.auxiliaries.log;\nimport LogLevel = gloperate.auxiliaries.LogLevel;\n\nimport {\n    Configuration,\n    Renderer,\n    Visualization,\n    initialize\n} from '../../source/treemap-renderer';\n\nimport { CSVData } from './csvdata';\n\nimport { Example } from '../example';\n\n/* spellchecker: enable */\n\n\n// tslint:disable:max-classes-per-file\n\nexport class ImplicitInnerNodesTreemapExample extends Example {\n\n    protected obtainUrl(hash: string): string {\n        return window.location.origin + window.location.pathname + \"?data=\" + hash;\n    }\n\n    get canvas(): gloperate.Canvas {\n        return this._canvas;\n    }\n\n    get visualization(): Visualization {\n        return this._visualization;\n    }\n\n    get renderer(): Renderer {\n        return this._renderer;\n    }\n\n    private _canvas: gloperate.Canvas;\n    private _visualization: Visualization;\n    private _renderer: Renderer;\n\n\n    validate(element: HTMLCanvasElement | string): boolean {\n        return this.initialize(element);\n        // return false;\n    }\n\n    preview(element: HTMLCanvasElement | string): boolean {\n        return this.initialize(element);\n        // return false;\n    }\n\n    feature(element: HTMLCanvasElement | string): boolean {\n\n        const success = this.initialize(element);\n\n        const renderer = this._visualization.renderer as Renderer;\n        const canvas = this._canvas as gloperate.Canvas;\n        const visualization = this._visualization;\n\n        const loadConfig = (config: Configuration) => {\n            const oldConfig = visualization.configuration;\n\n            try {\n                visualization.configuration = config;\n                renderer.invalidate();\n            }\n            catch (error) {\n                visualization.configuration = oldConfig;\n                renderer.invalidate();\n            }\n        };\n\n        // export variables\n\n        (window as any)['gloperate'] = gloperate;\n\n        (window as any)['canvas'] = canvas;\n        (window as any)['context'] = canvas.context;\n        (window as any)['controller'] = canvas.controller;\n\n        (window as any)['visualization'] = visualization;\n        (window as any)['renderer'] = renderer;\n\n\n        const dataElement = window.document.getElementById('csv-data')! as HTMLTextAreaElement;\n        const hashElement = window.document.getElementById('data-hash')! as HTMLPreElement;\n        const reloadElement = window.document.getElementById('reload')! as HTMLButtonElement;\n\n        if (dataElement !== undefined) {\n            const searchParams = new URLSearchParams(window.location.search);\n            const data = searchParams.get('data');\n\n            if (data) {\n                log(LogLevel.Debug, \"Load from\", data);\n                dataElement.value = atob(data);\n                // TODO: refactor to use Buffer.from(data, 'base64')\n            }\n\n            dataElement.oninput = (event) => {\n                const testdata = dataElement.value;\n\n                CSVData.loadAsync(testdata)\n                    .then((config: Configuration) => {\n                        loadConfig(config);\n\n                        if (hashElement !== undefined) {\n                            hashElement.textContent = this.obtainUrl(btoa(testdata));\n                        }\n                    });\n            };\n            dataElement.oninput({} as Event); // initial load\n        }\n\n        if (reloadElement !== undefined && hashElement !== undefined) {\n            reloadElement.onclick = (event) => {\n                if (hashElement.textContent !== undefined && hashElement.textContent !== \"\") {\n                    window.location.href = hashElement.textContent! as string;\n                }\n            };\n        }\n\n        return success && dataElement !== undefined;\n    }\n\n\n    initialize(element: HTMLCanvasElement | string): boolean {\n\n        this._canvas = initialize(element);\n\n        this._visualization = new Visualization();\n        const renderer: Renderer = this._visualization.renderer as Renderer;\n        this._canvas.renderer = renderer;\n\n        super.expose();\n\n        return true;\n    }\n\n    uninitialize(): void {\n        this._canvas.dispose();\n        (this._renderer as gloperate.Renderer).uninitialize();\n    }\n\n}\n","\n        import { ImplicitInnerNodesTreemapExample } from './treemap.ts';\n\n        window.onload = function () {\n\n            const canvas = document.getElementById('canvas');\n            const exampleRenderer = new ImplicitInnerNodesTreemapExample();\n            window['example'] = exampleRenderer;\n            exampleRenderer.feature(canvas);\n\n            const aboutCode = window.document.getElementById('context-about');\n            if (aboutCode) {\n                aboutCode.innerText = context.aboutString();\n            }\n        };\n    ","\n        import * as treemaprenderer from '/examples/index.ts';\n        window['treemaprenderer'] = treemaprenderer;\n        document.title = __LIB_NAME__;\n        document.querySelector('#version').innerHTML = treemaprenderer.version();\n        document.querySelector('#branch').innerHTML = treemaprenderer.branch();\n        document.querySelector('#commit').innerHTML = treemaprenderer.commit();\n        document.querySelector('#cryear').innerHTML = new Date().getFullYear();\n    "],"names":["log","gloperate.auxiliaries","LogLevel","CSVHeader","_CSVData","header","config","NodeSort","lines","line","key","value","s","result","collect_string_column","name","row","collect_column","has_labels_column","paths","i","pathParts","leafWeights","leafHeights","leafColors","parts","createNode","index","parentIndex","gatherParentKey","edges","names","weights","heights","colors","nodes","currentIndex","partIndex","parentKey","Topology","data","payload","resolve","reject","Configuration","parse","error","url","request","CSVData","ImplicitInnerNodesTreemapExample","Example","hash","element","success","renderer","canvas","visualization","loadConfig","oldConfig","gloperate","dataElement","hashElement","reloadElement","event","testdata","initialize","Visualization","exampleRenderer","aboutCode","treemaprenderer","treemaprenderer.version","treemaprenderer.branch","treemaprenderer.commit"],"mappings":"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"}