{"version":3,"file":"diverging-BdfUelDs.js","sources":["../../examples/diverging-data-csv-with-explicit-inner-nodes/csvdata.ts","../../examples/diverging-data-csv-with-explicit-inner-nodes/treemap.ts","../../examples/diverging-data-csv-with-explicit-inner-nodes/index.html?html-proxy&index=1.js","../../examples/diverging-data-csv-with-explicit-inner-nodes/index.html?html-proxy&index=2.js"],"sourcesContent":["\n/* spellchecker: disable */\n\nimport * as gloperate from 'webgl-operate';\n\nimport log = gloperate.auxiliaries.log;\nimport LogLevel = gloperate.auxiliaries.LogLevel;\n\nimport { parse } from 'papaparse';\n\nimport { Configuration, Topology, NodeSort } from '../../source/treemap-renderer';\n\n/* spellchecker: enable */\n\n\nexport class CSVHeader {\n    public csv_delimiter: string = ';';\n    public id_column: string = '';\n    public parent_column: string = '';\n    public weight_column: string = '';\n    public height_column: string = '';\n    public color_column: string = '';\n    public neutral_element: number = 0.5;\n    public label_column: string = '';\n}\n\n\nexport class CSVData {\n    protected static readonly FAILED = (url: string, request: XMLHttpRequest) =>\n        `fetching '${url}' failed (${request.status}): ${request.statusText}`;\n\n    protected static initializeHeader(header: CSVHeader): void {\n        header.csv_delimiter = ';';\n        header.id_column = 'ids';\n        header.parent_column = 'parents';\n    }\n\n    protected static parseHeader(lines: Array<string>, header: CSVHeader): void {\n        while (lines.length >= 1 && lines[0].startsWith('#')) {\n            const line = lines.shift()!.substring(1).trim();\n\n            const [key, value] = line.split('=').map((s: string) => s.trim());\n\n            if (key == 'delimiter') {\n                header.csv_delimiter = value || ';';\n            } else if (key == 'ids') {\n                header.id_column = value || 'ids';\n            } else if (key == 'parents') {\n                header.parent_column = value || 'parents';\n            } else if (key == 'weights') {\n                header.weight_column = value || '';\n            } else if (key == 'heights') {\n                header.height_column = value || '';\n            } else if (key == 'colors') {\n                header.color_column = value || '';\n            } else if (key == 'neutralElement') {\n                header.neutral_element = parseFloat(value) || header.neutral_element;\n            } else if (key == 'labels') {\n                header.label_column = value || '';\n            } else {\n                log(LogLevel.Warning, `Unparsed header`, key, '=', value);\n            }\n        }\n    }\n\n    protected static parsePapaparseResult(result: any, header: CSVHeader, config: Configuration): void {\n        const collect_id_column = (result: any, name: string) => {\n            if (result.meta.fields.indexOf(name) < 0) {\n                const column = new Uint32Array(result.data.length);\n                return column;\n            }\n\n            const column = result.data.map((row: any) => {\n                return row[name] ? row[name] : 0;\n            });\n\n            return Uint32Array.from(column);\n        };\n\n        const collect_column = (result: any, name: string) => {\n            if (result.meta.fields.indexOf(name) < 0) {\n                const column = new Float32Array(result.data.length);\n                return column;\n            }\n\n            const column = result.data.map((row: any) => {\n                return row[name] ? row[name] : -1.0;\n            });\n\n            return Float32Array.from([0].concat(column));\n        };\n\n        const has_labels_column = (name: string) => result.meta.fields.indexOf(name) >= 0;\n\n        const collect_labels_column = (result: any, name: string) => {\n            if (result.meta.fields.indexOf(name) < 0) {\n                const column = new Array<string>(result.data.length);\n                return column;\n            }\n\n            const column = result.data.map((row: any) => {\n                return row[name] ? row[name] : \"\";\n            });\n\n            return column;\n        };\n\n        // parse edges\n\n        const ids = collect_id_column(result, header.id_column);\n        const parents = collect_id_column(result, header.parent_column);\n\n        // parse weights\n\n        const weights = collect_column(result, header.weight_column);\n\n        // parse heights\n\n        const heights = collect_column(result, header.height_column);\n\n        // parse colors\n\n        const colors = collect_column(result, header.color_column);\n\n        // parse labels\n\n        const labels = collect_labels_column(result, header.label_column);\n\n        // Load topology\n\n        const edges = new Array<Configuration.NodeIdentifier>();\n\n        for (let i = 0; i < ids.length; i++) {\n            const id = ids[i];\n            const parentId = parents[i];\n\n            // assert parentId == 0\n\n            edges.push(parentId);\n            edges.push(id);\n        }\n\n        config.topology = {\n            edges: edges,\n            semantics: Topology.InputSemantics.ParentIdId,\n            format: Topology.InputFormat.Interleaved,\n        };\n\n        config.buffers = [\n            {\n                identifier: 'source-weights',\n                type: 'numbers',\n                data: weights,\n                linearization: 'topology',\n            },\n            {\n                identifier: 'source-heights',\n                type: 'numbers',\n                data: heights,\n                linearization: 'topology',\n            },\n            {\n                identifier: 'source-colors',\n                type: 'numbers',\n                data: colors,\n                linearization: 'topology',\n            }\n        ];\n\n        config.bufferViews = [\n            {\n                identifier: 'weights',\n                source: 'buffer:source-weights',\n                transformations: [\n                    { type: 'fill-invalid', value: 0.0, invalidValue: -1.0 },\n                    { type: 'propagate-up', operation: 'sum' }\n                ],\n            },\n            {\n                identifier: 'heights-normalized',\n                source: 'buffer:source-heights',\n                transformations: [\n                    { type: 'fill-invalid', value: 0.0, invalidValue: -1.0 },\n                    { type: 'normalize', operation: 'zero-to-max' }\n                ],\n            },\n            {\n                identifier: 'colors-normalized',\n                source: 'buffer:source-colors',\n                transformations: [\n                    { type: 'normalize', operation: 'diverging', neutralElement: header.neutral_element }\n                ],\n            }\n        ];\n\n        if (has_labels_column(header.label_column)) {\n            const names = new Map<number, string>();\n\n            for (let i = 0; i < labels.length; ++i) {\n                names.set(ids[i], labels[i]);\n            }\n\n            config.labels = {\n                innerNodeLayerRange: [1, 2],\n                numTopInnerNodes: 50,\n                numTopWeightNodes: 50,\n                numTopHeightNodes: 50,\n                numTopColorNodes: 50,\n                names: names\n            };\n        }\n\n        config.colors = [\n            { identifier: 'emphasis', colorspace: 'hex', value: '#00b0ff' },\n            { identifier: 'auxiliary', colorspace: 'hex', values: ['#00aa5e', '#71237c'] },\n            { identifier: 'inner', colorspace: 'hex', values: ['#e8eaee', '#eef0f4'] },\n            { identifier: 'leaf', preset: 'BrBG', steps: 7 },\n        ];\n\n        config.layout = {\n            algorithm: 'snake',\n            weight: 'bufferView:weights',\n            sort: {\n                key: 'bufferView:weights',\n                algorithm: NodeSort.Algorithm.Keep\n            },\n            parentPadding: { type: 'relative', value: 0.05 },\n            siblingMargin: { type: 'relative', value: 0.05 },\n            accessoryPadding: {\n                type: 'absolute',\n                direction: 'bottom',\n                value: [0.0, 0.02, 0.01, 0.0],\n                relativeAreaThreshold: 0.4, targetAspectRatio: 8.0,\n            },\n        };\n\n        config.geometry = {\n            parentLayer: { showRoot: false },\n            leafLayer: {\n                colorMap: 'color:leaf',\n                height: 'bufferView:heights-normalized',\n                colors: 'bufferView:colors-normalized',\n                colorsNormalized: true\n            },\n            emphasis: { outline: new Array<number>(), highlight: new Array<number>() },\n            heightScale: 0.5,\n        };\n\n        config.altered.alter('any');\n    }\n\n    static loadAsync(data: string): Promise<Configuration> {\n        const header = new CSVHeader();\n\n        CSVData.initializeHeader(header);\n\n        const lines = data.split('\\n');\n\n        CSVData.parseHeader(lines, header);\n\n        const payload = lines.join('\\n');\n\n        return this.loadAsyncHeader(payload, header);\n    }\n\n    static loadAsyncHeader(data: string, header: CSVHeader): Promise<Configuration> {\n        return new Promise<Configuration>((resolve, reject) => {\n            const config = new Configuration();\n\n            parse(data, {\n                error: (error: any) => reject(error),\n                complete: (result) => {\n                    CSVData.parsePapaparseResult(result, header, config);\n\n                    resolve(config);\n                },\n                delimiter: header.csv_delimiter,\n                quoteChar: '\"',\n                escapeChar: '\"',\n                header: true,\n                comments: '#',\n                skipEmptyLines: true\n            });\n        });\n    }\n\n}\n","\n\n/* spellchecker: disable */\n\nimport * as gloperate from 'webgl-operate';\n\nimport log = gloperate.auxiliaries.log;\nimport LogLevel = gloperate.auxiliaries.LogLevel;\n\nimport {\n    Configuration,\n    Renderer,\n    Visualization,\n    initialize\n} from '../../source/treemap-renderer';\n\nimport { CSVData } from './csvdata';\n\nimport { Example } from '../example';\n\n/* spellchecker: enable */\n\n\n// tslint:disable:max-classes-per-file\n\nexport class ExplicitInnerNodesTreemapExample extends Example {\n\n    protected obtainUrl(hash: string): string {\n        return window.location.origin + window.location.pathname + \"?data=\" + hash;\n    }\n\n    get canvas(): gloperate.Canvas {\n        return this._canvas;\n    }\n\n    get visualization(): Visualization {\n        return this._visualization;\n    }\n\n    get renderer(): Renderer {\n        return this._renderer;\n    }\n\n    private _canvas: gloperate.Canvas;\n    private _visualization: Visualization;\n    private _renderer: Renderer;\n\n\n    validate(element: HTMLCanvasElement | string): boolean {\n        return this.initialize(element);\n        // return false;\n    }\n\n    preview(element: HTMLCanvasElement | string): boolean {\n        return this.initialize(element);\n        // return false;\n    }\n\n    feature(element: HTMLCanvasElement | string): boolean {\n\n        const dataElement = window.document.getElementById('csv-data')! as HTMLTextAreaElement;\n        const hashElement = window.document.getElementById('data-hash')! as HTMLPreElement;\n        const reloadElement = window.document.getElementById('reload')! as HTMLButtonElement;\n        const configElement = window.document.getElementById('config-display')! as HTMLPreElement;\n\n        const success = this.initialize(element);\n\n        const renderer = this._visualization.renderer as Renderer;\n        const canvas = this._canvas as gloperate.Canvas;\n        const visualization = this._visualization;\n\n        const fullscreenTarget = canvas.element;\n\n        window.document.getElementById('fullscreen')!.onclick = () => {\n            gloperate.viewer.Fullscreen.toggle(fullscreenTarget);\n        };\n\n        const loadConfig = (config: Configuration) => {\n            const oldConfig = visualization.configuration;\n\n            try {\n                visualization.configuration = config;\n                visualization.update();\n                renderer.invalidate();\n\n                if (configElement) {\n                    configElement.textContent = JSON.stringify(config.toJSON(), null, 2);\n                }\n            }\n            catch (error) {\n                console.log(error);\n\n                if (oldConfig === undefined) {\n                    return;\n                }\n\n                const rescueConfig = new Configuration();\n\n                rescueConfig.topology = oldConfig.topology;\n                rescueConfig.layout = oldConfig.layout;\n                rescueConfig.buffers = oldConfig.buffers;\n                rescueConfig.bufferViews = oldConfig.bufferViews;\n                rescueConfig.colors = oldConfig.colors;\n                rescueConfig.geometry = oldConfig.geometry;\n                rescueConfig.labels = oldConfig.labels;\n\n                visualization.configuration = rescueConfig;\n                visualization.update();\n                renderer.invalidate();\n            }\n        };\n\n        // export variables\n\n        (window as any)['gloperate'] = gloperate;\n\n        (window as any)['canvas'] = canvas;\n        (window as any)['context'] = canvas.context;\n        (window as any)['controller'] = canvas.controller;\n\n        (window as any)['visualization'] = visualization;\n        (window as any)['renderer'] = renderer;\n\n        if (dataElement) {\n            const searchParams = new URLSearchParams(window.location.search);\n            const data = searchParams.get('data');\n\n            if (data) {\n                log(LogLevel.Debug, \"Load from\", data);\n                dataElement.value = atob(data);\n                // TODO: refactor to use Buffer.from(data, 'base64')\n            }\n\n            dataElement.oninput = (event) => {\n                const testdata = dataElement.value;\n\n                CSVData.loadAsync(testdata)\n                    .then((config: Configuration) => {\n                        loadConfig(config);\n\n                        if (hashElement) {\n                            hashElement.textContent = this.obtainUrl(btoa(testdata));\n                        }\n                    });\n            };\n            dataElement.oninput({} as Event); // initial load\n        }\n\n        if (reloadElement && hashElement) {\n            reloadElement.onclick = (event) => {\n                if (hashElement.textContent && hashElement.textContent !== \"\") {\n                    window.location.href = hashElement.textContent! as string;\n                }\n            };\n        }\n\n        return success && dataElement !== undefined && dataElement !== null;\n    }\n\n\n    initialize(element: HTMLCanvasElement | string): boolean {\n\n        this._canvas = initialize(element);\n\n        this._visualization = new Visualization();\n        const renderer: Renderer = this._visualization.renderer as Renderer;\n        this._canvas.renderer = renderer;\n\n        super.expose();\n\n        return true;\n    }\n\n    uninitialize(): void {\n        this._canvas.dispose();\n        (this._renderer as gloperate.Renderer).uninitialize();\n    }\n\n}\n","\n        import { ExplicitInnerNodesTreemapExample } from './treemap.ts';\n\n        window.onload = function () {\n\n            const canvas = document.getElementById('canvas');\n            const exampleRenderer = new ExplicitInnerNodesTreemapExample();\n            window['example'] = exampleRenderer;\n            exampleRenderer.feature(canvas);\n\n            const aboutCode = window.document.getElementById('context-about');\n            if (aboutCode) {\n                aboutCode.innerText = context.aboutString();\n            }\n        };\n    ","\n        import * as treemaprenderer from '/examples/index.ts';\n        window['treemaprenderer'] = treemaprenderer;\n        document.title = __LIB_NAME__;\n        document.querySelector('#version').innerHTML = treemaprenderer.version();\n        document.querySelector('#branch').innerHTML = treemaprenderer.branch();\n        document.querySelector('#commit').innerHTML = treemaprenderer.commit();\n        document.querySelector('#cryear').innerHTML = new Date().getFullYear();\n    "],"names":["log","gloperate.auxiliaries","LogLevel","CSVHeader","_CSVData","header","lines","line","key","value","s","result","config","collect_id_column","name","column","row","collect_column","has_labels_column","collect_labels_column","ids","parents","weights","heights","colors","labels","edges","i","id","parentId","Topology","names","NodeSort","data","payload","resolve","reject","Configuration","parse","error","url","request","CSVData","ExplicitInnerNodesTreemapExample","Example","hash","element","dataElement","hashElement","reloadElement","configElement","success","renderer","canvas","visualization","fullscreenTarget","gloperate.viewer","loadConfig","oldConfig","rescueConfig","gloperate","event","testdata","initialize","Visualization","exampleRenderer","aboutCode","treemaprenderer","treemaprenderer.version","treemaprenderer.branch","treemaprenderer.commit"],"mappings":"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"}